// scripts/ajustar-politicas-seguranca.js
// Este script ajusta as pol√≠ticas de seguran√ßa do Supabase para permitir acesso √† tabela 'usuarios'

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { executeSql } from '../db/supabase.js';

// Carregar vari√°veis de ambiente
dotenv.config();

// Obter as credenciais do Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o necess√°rias.');
  process.exit(1);
}

// Criar cliente Supabase com chave de servi√ßo
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function habilitarPoliticasAcesso() {
  try {
    console.log('üîí Habilitando pol√≠ticas de acesso para a tabela usuarios...');
    
    // 1. Primeira etapa: Desativar RLS (Row Level Security) para a tabela 'usuarios'
    // Isso permite acesso completo sem restri√ß√µes (APENAS EM AMBIENTE DE DESENVOLVIMENTO!)
    console.log('üëâ Tentando desativar RLS para a tabela usuarios...');
    
    const resultadoRLS = await executeSql(`
      ALTER TABLE usuarios DISABLE ROW LEVEL SECURITY;
    `);
    
    if (resultadoRLS) {
      console.log('‚úÖ RLS desativado com sucesso para a tabela usuarios!');
    } else {
      console.error('‚ùå Erro ao desativar RLS para a tabela usuarios.');
    }
    
    // 2. Segunda etapa: Criar pol√≠ticas de acesso amplas em caso de falha da primeira etapa
    console.log('üëâ Criando pol√≠ticas de acesso para a tabela usuarios...');
    
    // Criar pol√≠tica para permitir qualquer pessoa ler a tabela 'usuarios'
    await executeSql(`
      DROP POLICY IF EXISTS "Permitir leitura para todos" ON usuarios;
      CREATE POLICY "Permitir leitura para todos" ON usuarios
        FOR SELECT
        USING (true);
    `);
    
    // Criar pol√≠tica para permitir inser√ß√£o
    await executeSql(`
      DROP POLICY IF EXISTS "Permitir inser√ß√£o para todos" ON usuarios;
      CREATE POLICY "Permitir inser√ß√£o para todos" ON usuarios
        FOR INSERT
        WITH CHECK (true);
    `);
    
    // Criar pol√≠tica para permitir atualiza√ß√£o
    await executeSql(`
      DROP POLICY IF EXISTS "Permitir atualiza√ß√£o para todos" ON usuarios;
      CREATE POLICY "Permitir atualiza√ß√£o para todos" ON usuarios
        FOR UPDATE
        USING (true)
        WITH CHECK (true);
    `);
    
    // Criar pol√≠tica para permitir exclus√£o
    await executeSql(`
      DROP POLICY IF EXISTS "Permitir exclus√£o para todos" ON usuarios;
      CREATE POLICY "Permitir exclus√£o para todos" ON usuarios
        FOR DELETE
        USING (true);
    `);
    
    console.log('‚úÖ Pol√≠ticas de acesso criadas com sucesso para a tabela usuarios!');
    
    // 3. Terceira etapa: Verificar se a tabela √© acess√≠vel
    console.log('üîç Verificando se a tabela usuarios √© acess√≠vel...');
    
    const { data: usuarios, error } = await supabase
      .from('usuarios')
      .select('*')
      .limit(1);
      
    if (error) {
      console.error('‚ùå Erro ao acessar a tabela usuarios:', error.message);
    } else if (!usuarios || usuarios.length === 0) {
      console.log('‚ö†Ô∏è A tabela usuarios √© acess√≠vel, mas n√£o h√° registros.');
    } else {
      console.log('‚úÖ A tabela usuarios √© acess√≠vel! Encontrado:', usuarios.length, 'registro(s)');
    }
    
    // Exibe os registros para debug
    if (usuarios && usuarios.length > 0) {
      console.log('üìã Primeiro registro encontrado:');
      console.log('ID:', usuarios[0].id);
      console.log('Email:', usuarios[0].email);
      console.log('Papel:', usuarios[0].papel);
    }
    
    // 4. Quarta etapa: Verificar todos os usu√°rios novamente
    console.log('\nüîç Verificando todos os usu√°rios na tabela...');
    
    const { data: todosUsuarios, error: errorTodos } = await supabase
      .from('usuarios')
      .select('*');
      
    if (errorTodos) {
      console.error('‚ùå Erro ao buscar todos os usu√°rios:', errorTodos.message);
    } else if (!todosUsuarios || todosUsuarios.length === 0) {
      console.log('‚ö†Ô∏è N√£o foram encontrados usu√°rios na tabela.');
    } else {
      console.log(`‚úÖ Encontrados ${todosUsuarios.length} usu√°rios na tabela:`);
      todosUsuarios.forEach((usuario, index) => {
        console.log(`\n--- Usu√°rio ${index + 1} ---`);
        console.log('ID:', usuario.id);
        console.log('Email:', usuario.email);
        console.log('Papel:', usuario.papel);
        console.log('Criado em:', usuario.criado_em);
      });
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao configurar pol√≠ticas de acesso:', error.message);
    return false;
  }
}

// Executar o script
async function main() {
  const resultado = await habilitarPoliticasAcesso();
  
  if (resultado) {
    console.log('\nüéâ Configura√ß√£o das pol√≠ticas de acesso conclu√≠da com sucesso!');
    console.log('Agora voc√™ deve conseguir fazer login com os usu√°rios da tabela.');
  } else {
    console.error('\n‚ùå N√£o foi poss√≠vel configurar as pol√≠ticas de acesso completamente.');
    console.log('Talvez seja necess√°rio configurar manualmente no painel do Supabase.');
  }
}

main();