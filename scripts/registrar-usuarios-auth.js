// scripts/registrar-usuarios-auth.js
// Script para registrar usu√°rios existentes na tabela 'usuarios' no sistema de autentica√ß√£o do Supabase

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Verificar exist√™ncia das vari√°veis necess√°rias
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Erro: Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

// Criar cliente Supabase com chave de servi√ßo
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

/**
 * Fun√ß√£o principal para registrar usu√°rio no sistema de autentica√ß√£o
 */
async function registrarUsuarioAuth(usuarioTabela) {
  try {
    const { id, email, papel, senha } = usuarioTabela;
    
    console.log(`üîÑ Tentando registrar usu√°rio no Auth: ${email} (${id})`);
    
    // Verificar se o usu√°rio j√° existe no Auth
    try {
      const { data: authUser, error: getUserError } = await supabase.auth.admin.getUserById(id);
      
      if (!getUserError && authUser && authUser.user) {
        console.log('‚úÖ Usu√°rio j√° existe no Auth. ID:', authUser.user.id);
        return authUser.user;
      }
    } catch (getUserErr) {
      console.log('‚ö†Ô∏è Erro ao verificar usu√°rio no Auth:', getUserErr.message);
    }
    
    // Tenta criar o usu√°rio no Auth do Supabase com o mesmo UUID
    const { data, error } = await supabase.auth.admin.createUser({
      email,
      password: senha || 'Senha@123', // Senha padr√£o se n√£o for fornecida
      email_confirm: true,
      user_metadata: { papel },
      // Importante: usar o mesmo UUID da tabela usuarios
      id
    });
    
    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio no Auth:', error.message);
      
      // Se o erro indica que o usu√°rio j√° existe, tentar atualizar
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è O email j√° est√° em uso. Tentando atualizar...');
        
        // Tentar encontrar o usu√°rio por email
        const { data: userByEmail, error: emailError } = await supabase.auth.admin.listUsers();
        
        if (!emailError && userByEmail && userByEmail.users) {
          const existingUser = userByEmail.users.find(u => u.email === email);
          
          if (existingUser) {
            console.log('‚úÖ Encontrado usu√°rio pelo email. ID:', existingUser.id);
            
            // Tentar atualizar o ID para coincidir com a tabela usuarios
            // (isso pode ser imposs√≠vel em alguns provedores)
            try {
              const { data: updateData, error: updateError } = await supabase.auth.admin.updateUserById(
                existingUser.id,
                { user_metadata: { papel } }
              );
              
              if (updateError) {
                console.error('‚ùå Erro ao atualizar metadados:', updateError.message);
              } else {
                console.log('‚úÖ Metadados atualizados com sucesso');
              }
            } catch (updateErr) {
              console.error('‚ùå Erro ao atualizar usu√°rio:', updateErr.message);
            }
            
            return existingUser;
          }
        }
      }
      
      return null;
    }
    
    console.log('‚úÖ Usu√°rio criado com sucesso no Auth. ID:', data.user.id);
    return data.user;
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
    return null;
  }
}

/**
 * Fun√ß√£o principal que busca usu√°rios da tabela e os registra no Auth
 */
async function registrarTodosUsuarios() {
  try {
    console.log('üîç Buscando usu√°rios da tabela...');
    
    // Buscar usu√°rios na tabela 'usuarios'
    const { data: usuarios, error } = await supabase
      .from('usuarios')
      .select('*');
      
    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error.message);
      return;
    }
    
    if (!usuarios || usuarios.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado na tabela');
      return;
    }
    
    console.log(`‚úÖ Encontrados ${usuarios.length} usu√°rios na tabela`);
    
    // Para cada usu√°rio, tentar registrar no Auth
    for (const usuario of usuarios) {
      console.log(`\n=== Processando usu√°rio: ${usuario.email} ===`);
      
      // Definir uma senha padr√£o para o usu√°rio
      // Obs: em um ambiente real, seria melhor gerar senhas aleat√≥rias e notificar o usu√°rio
      // ou implementar um fluxo de redefini√ß√£o de senha
      const usuarioComSenha = {
        ...usuario,
        senha: 'Senha@123'
      };
      
      await registrarUsuarioAuth(usuarioComSenha);
      
      console.log('=== Fim do processamento deste usu√°rio ===');
    }
    
    console.log('\nüéâ Processo conclu√≠do!');
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
  }
}

// Executar a fun√ß√£o principal
registrarTodosUsuarios();