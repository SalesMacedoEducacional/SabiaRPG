// scripts/criar-usuarios-direto.js
// Este script cria usu√°rios diretamente inserindo nas tabelas do Supabase,
// sem depender da API de autentica√ß√£o que est√° apresentando erros.

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import crypto from 'crypto';

// Carregar vari√°veis de ambiente
dotenv.config();

// Obter as credenciais do Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o necess√°rias.');
  process.exit(1);
}

// Criar cliente Supabase com chave de servi√ßo
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

/**
 * Gera um hash seguro para a senha usando SCRYPT
 * @param {string} senha - Senha em texto puro
 * @returns {Promise<string>} - Hash no formato "hash.salt"
 */
async function hashPassword(senha) {
  return new Promise((resolve, reject) => {
    // Gerar um salt aleat√≥rio
    const salt = crypto.randomBytes(16).toString('hex');
    
    // Usar scrypt para gerar o hash
    crypto.scrypt(senha, salt, 64, (err, derivedKey) => {
      if (err) reject(err);
      resolve(`${derivedKey.toString('hex')}.${salt}`);
    });
  });
}

/**
 * Gera um UUID v4 aleat√≥rio
 * @returns {string} - UUID v4
 */
function gerarUUID() {
  return crypto.randomUUID();
}

/**
 * Cria um usu√°rio diretamente na tabela 'usuarios'
 * @param {Object} params - Par√¢metros para cria√ß√£o do usu√°rio
 * @returns {Promise<Object|null>} - Dados do usu√°rio criado ou null em caso de erro
 */
async function criarUsuarioDireto(params) {
  const { email, senha, papel, nome_completo, username } = params;
  
  try {
    // Validar campos obrigat√≥rios
    if (!email || !senha || !papel) {
      console.error('‚ùå Erro: email, senha e papel s√£o campos obrigat√≥rios');
      return null;
    }
    
    console.log(`üîÑ Iniciando cria√ß√£o direta do usu√°rio: ${email} (${papel})`);
    
    // Verificar se o usu√°rio j√° existe na tabela
    const { data: usuarioExistente, error: checkError } = await supabase
      .from('usuarios')
      .select('id')
      .eq('email', email)
      .single();
      
    if (!checkError && usuarioExistente) {
      console.log('‚ö†Ô∏è Usu√°rio j√° existe na tabela com ID:', usuarioExistente.id);
      return usuarioExistente;
    }
    
    // Gerar um ID UUID v4 para o usu√°rio
    const userId = gerarUUID();
    console.log('üÜî ID gerado para o usu√°rio:', userId);
    
    // Gerar hash da senha
    const senhaHash = await hashPassword(senha);
    console.log('üîê Hash da senha gerado com sucesso');
    
    // Preparar dados para inser√ß√£o - usando apenas as colunas que realmente existem na tabela
    const dadosUsuario = {
      id: userId,
      email,
      papel,
      senha_hash: senhaHash,
      criado_em: new Date().toISOString()
    };
    
    // Inserir na tabela de usu√°rios
    console.log('üìù Inserindo usu√°rio na tabela...');
    const { data: novoUsuario, error: insertError } = await supabase
      .from('usuarios')
      .insert(dadosUsuario)
      .select()
      .single();
      
    if (insertError) {
      console.error('‚ùå Erro ao inserir usu√°rio:', insertError.message);
      console.error('   Detalhes completos:', JSON.stringify(insertError));
      return null;
    }
    
    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log('üìã Dados do usu√°rio:');
    console.log(novoUsuario);
    
    return novoUsuario;
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
    return null;
  }
}

// Executar o script se chamado diretamente
if (process.argv[1].includes('criar-usuarios-direto.js')) {
  // Definir os usu√°rios a serem criados
  const usuariosParaCriar = [
    {
      email: 'gestor@sabiarpg.edu.br',
      senha: 'Senha@123',
      papel: 'gestor',
      nome_completo: 'Gestor Escolar'
    },
    {
      email: 'professor@sabiarpg.edu.br',
      senha: 'Senha@123',
      papel: 'professor',
      nome_completo: 'Professor Demo'
    },
    {
      email: 'aluno@sabiarpg.edu.br',
      senha: 'Senha@123',
      papel: 'aluno',
      nome_completo: 'Aluno Demo'
    }
  ];
  
  // Criar os usu√°rios em sequ√™ncia
  async function criarUsuarios() {
    for (const usuario of usuariosParaCriar) {
      console.log(`\n=== Criando usu√°rio: ${usuario.email} ===`);
      await criarUsuarioDireto(usuario);
      console.log('=== Fim da cria√ß√£o deste usu√°rio ===\n');
    }
    
    console.log('üéâ Processo de cria√ß√£o de usu√°rios conclu√≠do!');
  }
  
  criarUsuarios();
}

export { criarUsuarioDireto };